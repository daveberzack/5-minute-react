{"ast":null,"code":"var _jsxFileName = \"/Users/dave/Public/5minutegames/client/src/contexts/AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { createContext, useContext, useState, useEffect } from 'react';\nimport { authService } from '../services/authService';\nimport { userService } from '../services/userService';\nimport { localStorageService } from '../services/localStorageService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [localFavorites, setLocalFavorites] = useState([]);\n  useEffect(() => {\n    // Always load favorites from localStorage first for immediate UI\n    const {\n      favorites\n    } = localStorageService.getFavorites();\n    setLocalFavorites(favorites);\n\n    // Then check for authenticated user and sync\n    authService.checkAutoLogin().then(async authenticatedUser => {\n      if (authenticatedUser) {\n        var _authenticatedUser$fa;\n        // Sync favorites between localStorage and server\n        const syncResult = localStorageService.syncFavorites(authenticatedUser.favorites, authenticatedUser.favoritesLastModified);\n\n        // Update user object with synced favorites\n        const updatedUser = {\n          ...authenticatedUser,\n          favorites: syncResult.favorites\n        };\n\n        // If local was newer, update server\n        if (syncResult.source === 'local' && syncResult.favorites.length !== ((_authenticatedUser$fa = authenticatedUser.favorites) === null || _authenticatedUser$fa === void 0 ? void 0 : _authenticatedUser$fa.length)) {\n          try {\n            // TODO: We'll need to add a bulk update API endpoint\n            console.log('Local favorites are newer, should sync to server:', syncResult.favorites);\n          } catch (error) {\n            console.error('Failed to sync local favorites to server:', error);\n          }\n        }\n        setUser(updatedUser);\n        setLocalFavorites(syncResult.favorites);\n      } else {\n        // No authenticated user, use localStorage favorites only\n        setUser(null);\n      }\n    }).catch(() => {\n      setUser(null);\n      // Keep localStorage favorites even if auth fails\n    }).finally(() => setIsLoading(false));\n  }, []);\n  const login = async (email, password) => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      const authenticatedUser = await authService.login(email, password);\n\n      // Sync favorites between localStorage and server\n      const syncResult = localStorageService.syncFavorites(authenticatedUser.favorites, authenticatedUser.favoritesLastModified);\n\n      // Update user object with synced favorites\n      const updatedUser = {\n        ...authenticatedUser,\n        favorites: syncResult.favorites\n      };\n      setUser(updatedUser);\n      setLocalFavorites(syncResult.favorites);\n      return updatedUser;\n    } catch (err) {\n      setError(err.message);\n      throw err;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const register = async (email, password, username, character, color) => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      const authenticatedUser = await authService.register(email, password, username, character, color);\n\n      // Sync favorites between localStorage and server (new users will have empty server favorites)\n      const syncResult = localStorageService.syncFavorites(authenticatedUser.favorites || [], authenticatedUser.favoritesLastModified);\n\n      // Update user object with synced favorites\n      const updatedUser = {\n        ...authenticatedUser,\n        favorites: syncResult.favorites\n      };\n      setUser(updatedUser);\n      setLocalFavorites(syncResult.favorites);\n      return updatedUser;\n    } catch (err) {\n      setError(err.message);\n      throw err;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const logout = async () => {\n    await authService.logout();\n    setUser(null);\n    // Keep localStorage favorites when logging out\n    // This allows users to maintain their favorites across login sessions\n    const {\n      favorites\n    } = localStorageService.getFavorites();\n    setLocalFavorites(favorites);\n  };\n\n  // User data management functions\n  const addFriend = async username => {\n    try {\n      const updatedUser = await userService.addFriend(username);\n      setUser(updatedUser);\n      return true;\n    } catch (error) {\n      console.error(\"Error adding friend:\", error);\n      return false;\n    }\n  };\n  const removeFriend = async friendId => {\n    try {\n      const updatedUser = await userService.removeFriend(friendId);\n      setUser(updatedUser);\n    } catch (error) {\n      console.error(\"Error removing friend:\", error);\n    }\n  };\n  const addFavorite = async gameId => {\n    try {\n      // Always update localStorage first (optimistic update)\n      const timestamp = localStorageService.addFavorite(gameId);\n      const {\n        favorites\n      } = localStorageService.getFavorites();\n      setLocalFavorites(favorites);\n\n      // If user is authenticated, also update server\n      if (user) {\n        try {\n          const updatedUser = await userService.addFavorite(gameId);\n          setUser(updatedUser);\n        } catch (error) {\n          console.error(\"Error syncing favorite to server:\", error);\n          // Keep localStorage change even if server fails\n          // TODO: Could implement a retry queue here for offline scenarios\n        }\n      }\n    } catch (error) {\n      console.error(\"Error adding favorite:\", error);\n      // If localStorage fails, try to revert the UI state\n      try {\n        const {\n          favorites\n        } = localStorageService.getFavorites();\n        setLocalFavorites(favorites);\n      } catch (revertError) {\n        console.error(\"Failed to revert favorites state:\", revertError);\n      }\n    }\n  };\n  const removeFavorite = async gameId => {\n    try {\n      // Always update localStorage first (optimistic update)\n      const timestamp = localStorageService.removeFavorite(gameId);\n      const {\n        favorites\n      } = localStorageService.getFavorites();\n      setLocalFavorites(favorites);\n\n      // If user is authenticated, also update server\n      if (user) {\n        try {\n          const updatedUser = await userService.removeFavorite(gameId);\n          setUser(updatedUser);\n        } catch (error) {\n          console.error(\"Error syncing favorite removal to server:\", error);\n          // Keep localStorage change even if server fails\n          // TODO: Could implement a retry queue here for offline scenarios\n        }\n      }\n    } catch (error) {\n      console.error(\"Error removing favorite:\", error);\n      // If localStorage fails, try to revert the UI state\n      try {\n        const {\n          favorites\n        } = localStorageService.getFavorites();\n        setLocalFavorites(favorites);\n      } catch (revertError) {\n        console.error(\"Failed to revert favorites state:\", revertError);\n      }\n    }\n  };\n  const updatePlay = async (gameId, score, message) => {\n    try {\n      const updatedUser = await userService.updatePlay(gameId, score, message);\n      setUser(updatedUser);\n    } catch (error) {\n      console.error(\"Error updating play:\", error);\n    }\n  };\n\n  // Helper function to get current favorites (from user if authenticated, otherwise from localStorage)\n  const getCurrentFavorites = () => {\n    return (user === null || user === void 0 ? void 0 : user.favorites) || localFavorites;\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      isLoading,\n      error,\n      login,\n      register,\n      logout,\n      isAuthenticated: !!user,\n      addFriend,\n      removeFriend,\n      addFavorite,\n      removeFavorite,\n      updatePlay,\n      favorites: getCurrentFavorites(),\n      localFavorites\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 224,\n    columnNumber: 9\n  }, this);\n};\n_s(AuthProvider, \"UFZ30/mAPKgO5LMju4DpNgP7ssc=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["createContext","useContext","useState","useEffect","authService","userService","localStorageService","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","user","setUser","isLoading","setIsLoading","error","setError","localFavorites","setLocalFavorites","favorites","getFavorites","checkAutoLogin","then","authenticatedUser","_authenticatedUser$fa","syncResult","syncFavorites","favoritesLastModified","updatedUser","source","length","console","log","catch","finally","login","email","password","err","message","register","username","character","color","logout","addFriend","removeFriend","friendId","addFavorite","gameId","timestamp","revertError","removeFavorite","updatePlay","score","getCurrentFavorites","Provider","value","isAuthenticated","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","Error","$RefreshReg$"],"sources":["/Users/dave/Public/5minutegames/client/src/contexts/AuthContext.js"],"sourcesContent":["import { createContext, useContext, useState, useEffect } from 'react';\nimport { authService } from '../services/authService';\nimport { userService } from '../services/userService';\nimport { localStorageService } from '../services/localStorageService';\n\nconst AuthContext = createContext();\n\nexport const AuthProvider = ({ children }) => {\n    const [user, setUser] = useState(null);\n    const [isLoading, setIsLoading] = useState(true);\n    const [error, setError] = useState(null);\n    const [localFavorites, setLocalFavorites] = useState([]);\n\n    useEffect(() => {\n        // Always load favorites from localStorage first for immediate UI\n        const { favorites } = localStorageService.getFavorites();\n        setLocalFavorites(favorites);\n\n        // Then check for authenticated user and sync\n        authService.checkAutoLogin()\n            .then(async (authenticatedUser) => {\n                if (authenticatedUser) {\n                    // Sync favorites between localStorage and server\n                    const syncResult = localStorageService.syncFavorites(\n                        authenticatedUser.favorites,\n                        authenticatedUser.favoritesLastModified\n                    );\n                    \n                    // Update user object with synced favorites\n                    const updatedUser = {\n                        ...authenticatedUser,\n                        favorites: syncResult.favorites\n                    };\n                    \n                    // If local was newer, update server\n                    if (syncResult.source === 'local' && syncResult.favorites.length !== authenticatedUser.favorites?.length) {\n                        try {\n                            // TODO: We'll need to add a bulk update API endpoint\n                            console.log('Local favorites are newer, should sync to server:', syncResult.favorites);\n                        } catch (error) {\n                            console.error('Failed to sync local favorites to server:', error);\n                        }\n                    }\n                    \n                    setUser(updatedUser);\n                    setLocalFavorites(syncResult.favorites);\n                } else {\n                    // No authenticated user, use localStorage favorites only\n                    setUser(null);\n                }\n            })\n            .catch(() => {\n                setUser(null);\n                // Keep localStorage favorites even if auth fails\n            })\n            .finally(() => setIsLoading(false));\n    }, []);\n\n    const login = async (email, password) => {\n        setIsLoading(true);\n        setError(null);\n        try {\n            const authenticatedUser = await authService.login(email, password);\n            \n            // Sync favorites between localStorage and server\n            const syncResult = localStorageService.syncFavorites(\n                authenticatedUser.favorites,\n                authenticatedUser.favoritesLastModified\n            );\n            \n            // Update user object with synced favorites\n            const updatedUser = {\n                ...authenticatedUser,\n                favorites: syncResult.favorites\n            };\n            \n            setUser(updatedUser);\n            setLocalFavorites(syncResult.favorites);\n            \n            return updatedUser;\n        } catch (err) {\n            setError(err.message);\n            throw err;\n        } finally {\n            setIsLoading(false);\n        }\n    };\n\n    const register = async (email, password, username, character, color) => {\n        setIsLoading(true);\n        setError(null);\n        try {\n            const authenticatedUser = await authService.register(email, password, username, character, color);\n            \n            // Sync favorites between localStorage and server (new users will have empty server favorites)\n            const syncResult = localStorageService.syncFavorites(\n                authenticatedUser.favorites || [],\n                authenticatedUser.favoritesLastModified\n            );\n            \n            // Update user object with synced favorites\n            const updatedUser = {\n                ...authenticatedUser,\n                favorites: syncResult.favorites\n            };\n            \n            setUser(updatedUser);\n            setLocalFavorites(syncResult.favorites);\n            \n            return updatedUser;\n        } catch (err) {\n            setError(err.message);\n            throw err;\n        } finally {\n            setIsLoading(false);\n        }\n    };\n\n    const logout = async () => {\n        await authService.logout();\n        setUser(null);\n        // Keep localStorage favorites when logging out\n        // This allows users to maintain their favorites across login sessions\n        const { favorites } = localStorageService.getFavorites();\n        setLocalFavorites(favorites);\n    };\n\n    // User data management functions\n    const addFriend = async (username) => {\n        try {\n            const updatedUser = await userService.addFriend(username);\n            setUser(updatedUser);\n            return true;\n        } catch (error) {\n            console.error(\"Error adding friend:\", error);\n            return false;\n        }\n    };\n\n    const removeFriend = async (friendId) => {\n        try {\n            const updatedUser = await userService.removeFriend(friendId);\n            setUser(updatedUser);\n        } catch (error) {\n            console.error(\"Error removing friend:\", error);\n        }\n    };\n\n    const addFavorite = async (gameId) => {\n        try {\n            // Always update localStorage first (optimistic update)\n            const timestamp = localStorageService.addFavorite(gameId);\n            const { favorites } = localStorageService.getFavorites();\n            setLocalFavorites(favorites);\n\n            // If user is authenticated, also update server\n            if (user) {\n                try {\n                    const updatedUser = await userService.addFavorite(gameId);\n                    setUser(updatedUser);\n                } catch (error) {\n                    console.error(\"Error syncing favorite to server:\", error);\n                    // Keep localStorage change even if server fails\n                    // TODO: Could implement a retry queue here for offline scenarios\n                }\n            }\n        } catch (error) {\n            console.error(\"Error adding favorite:\", error);\n            // If localStorage fails, try to revert the UI state\n            try {\n                const { favorites } = localStorageService.getFavorites();\n                setLocalFavorites(favorites);\n            } catch (revertError) {\n                console.error(\"Failed to revert favorites state:\", revertError);\n            }\n        }\n    };\n\n    const removeFavorite = async (gameId) => {\n        try {\n            // Always update localStorage first (optimistic update)\n            const timestamp = localStorageService.removeFavorite(gameId);\n            const { favorites } = localStorageService.getFavorites();\n            setLocalFavorites(favorites);\n\n            // If user is authenticated, also update server\n            if (user) {\n                try {\n                    const updatedUser = await userService.removeFavorite(gameId);\n                    setUser(updatedUser);\n                } catch (error) {\n                    console.error(\"Error syncing favorite removal to server:\", error);\n                    // Keep localStorage change even if server fails\n                    // TODO: Could implement a retry queue here for offline scenarios\n                }\n            }\n        } catch (error) {\n            console.error(\"Error removing favorite:\", error);\n            // If localStorage fails, try to revert the UI state\n            try {\n                const { favorites } = localStorageService.getFavorites();\n                setLocalFavorites(favorites);\n            } catch (revertError) {\n                console.error(\"Failed to revert favorites state:\", revertError);\n            }\n        }\n    };\n\n    const updatePlay = async (gameId, score, message) => {\n        try {\n            const updatedUser = await userService.updatePlay(gameId, score, message);\n            setUser(updatedUser);\n        } catch (error) {\n            console.error(\"Error updating play:\", error);\n        }\n    };\n\n    // Helper function to get current favorites (from user if authenticated, otherwise from localStorage)\n    const getCurrentFavorites = () => {\n        return user?.favorites || localFavorites;\n    };\n\n    return (\n        <AuthContext.Provider value={{\n            user,\n            isLoading,\n            error,\n            login,\n            register,\n            logout,\n            isAuthenticated: !!user,\n            addFriend,\n            removeFriend,\n            addFavorite,\n            removeFavorite,\n            updatePlay,\n            favorites: getCurrentFavorites(),\n            localFavorites\n        }}>\n            {children}\n        </AuthContext.Provider>\n    );\n};\n\nexport const useAuth = () => {\n    const context = useContext(AuthContext);\n    if (!context) {\n        throw new Error('useAuth must be used within an AuthProvider');\n    }\n    return context;\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}