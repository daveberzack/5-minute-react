{"ast":null,"code":"import { apiClient } from './apiClient';\nimport { tokenManager } from './tokenManager';\nexport const authService = {\n  async login(email, password) {\n    const response = await apiClient.post('/auth/login', {\n      email,\n      password\n    });\n    tokenManager.setTokens(response.data.token, response.data.refreshToken);\n\n    // Always fetch complete user data after login\n    return await this.getCurrentUser();\n  },\n  async register(email, password, username, character, color) {\n    const response = await apiClient.post('/auth/register', {\n      email,\n      password,\n      username,\n      character,\n      color\n    });\n    tokenManager.setTokens(response.data.token, response.data.refreshToken);\n    return await this.getCurrentUser();\n  },\n  async logout() {\n    try {\n      const refreshToken = tokenManager.getRefreshToken();\n      if (refreshToken) {\n        await apiClient.post('/auth/logout', {\n          refreshToken\n        });\n      }\n    } finally {\n      tokenManager.clearTokens();\n    }\n  },\n  async checkAutoLogin() {\n    const token = tokenManager.getToken();\n    if (!token) return null;\n    try {\n      return await this.getCurrentUser();\n    } catch {\n      tokenManager.clearTokens();\n      return null;\n    }\n  },\n  async getCurrentUser() {\n    const response = await apiClient.get('/users/profile');\n    console.log(\"getCurrentUser\", response.data);\n    return response.data;\n  }\n};","map":{"version":3,"names":["apiClient","tokenManager","authService","login","email","password","response","post","setTokens","data","token","refreshToken","getCurrentUser","register","username","character","color","logout","getRefreshToken","clearTokens","checkAutoLogin","getToken","get","console","log"],"sources":["/Users/dave/Public/5minutegames/src/services/authService.js"],"sourcesContent":["import { apiClient } from './apiClient';\nimport { tokenManager } from './tokenManager';\n\nexport const authService = {\n    async login(email, password) {\n        const response = await apiClient.post('/auth/login', { email, password });\n        tokenManager.setTokens(response.data.token, response.data.refreshToken);\n        \n        // Always fetch complete user data after login\n        return await this.getCurrentUser();\n    },\n\n    async register(email, password, username, character, color) {\n        const response = await apiClient.post('/auth/register', {\n            email, password, username, character, color\n        });\n        tokenManager.setTokens(response.data.token, response.data.refreshToken);\n        return await this.getCurrentUser();\n    },\n\n    async logout() {\n        try {\n            const refreshToken = tokenManager.getRefreshToken();\n            if (refreshToken) {\n                await apiClient.post('/auth/logout', { refreshToken });\n            }\n        } finally {\n            tokenManager.clearTokens();\n        }\n    },\n\n    async checkAutoLogin() {\n        const token = tokenManager.getToken();\n        if (!token) return null;\n        \n        try {\n            return await this.getCurrentUser();\n        } catch {\n            tokenManager.clearTokens();\n            return null;\n        }\n    },\n\n    async getCurrentUser() {\n        const response = await apiClient.get('/users/profile');\n        console.log(\"getCurrentUser\", response.data);\n        return response.data;\n    }\n};"],"mappings":"AAAA,SAASA,SAAS,QAAQ,aAAa;AACvC,SAASC,YAAY,QAAQ,gBAAgB;AAE7C,OAAO,MAAMC,WAAW,GAAG;EACvB,MAAMC,KAAKA,CAACC,KAAK,EAAEC,QAAQ,EAAE;IACzB,MAAMC,QAAQ,GAAG,MAAMN,SAAS,CAACO,IAAI,CAAC,aAAa,EAAE;MAAEH,KAAK;MAAEC;IAAS,CAAC,CAAC;IACzEJ,YAAY,CAACO,SAAS,CAACF,QAAQ,CAACG,IAAI,CAACC,KAAK,EAAEJ,QAAQ,CAACG,IAAI,CAACE,YAAY,CAAC;;IAEvE;IACA,OAAO,MAAM,IAAI,CAACC,cAAc,CAAC,CAAC;EACtC,CAAC;EAED,MAAMC,QAAQA,CAACT,KAAK,EAAEC,QAAQ,EAAES,QAAQ,EAAEC,SAAS,EAAEC,KAAK,EAAE;IACxD,MAAMV,QAAQ,GAAG,MAAMN,SAAS,CAACO,IAAI,CAAC,gBAAgB,EAAE;MACpDH,KAAK;MAAEC,QAAQ;MAAES,QAAQ;MAAEC,SAAS;MAAEC;IAC1C,CAAC,CAAC;IACFf,YAAY,CAACO,SAAS,CAACF,QAAQ,CAACG,IAAI,CAACC,KAAK,EAAEJ,QAAQ,CAACG,IAAI,CAACE,YAAY,CAAC;IACvE,OAAO,MAAM,IAAI,CAACC,cAAc,CAAC,CAAC;EACtC,CAAC;EAED,MAAMK,MAAMA,CAAA,EAAG;IACX,IAAI;MACA,MAAMN,YAAY,GAAGV,YAAY,CAACiB,eAAe,CAAC,CAAC;MACnD,IAAIP,YAAY,EAAE;QACd,MAAMX,SAAS,CAACO,IAAI,CAAC,cAAc,EAAE;UAAEI;QAAa,CAAC,CAAC;MAC1D;IACJ,CAAC,SAAS;MACNV,YAAY,CAACkB,WAAW,CAAC,CAAC;IAC9B;EACJ,CAAC;EAED,MAAMC,cAAcA,CAAA,EAAG;IACnB,MAAMV,KAAK,GAAGT,YAAY,CAACoB,QAAQ,CAAC,CAAC;IACrC,IAAI,CAACX,KAAK,EAAE,OAAO,IAAI;IAEvB,IAAI;MACA,OAAO,MAAM,IAAI,CAACE,cAAc,CAAC,CAAC;IACtC,CAAC,CAAC,MAAM;MACJX,YAAY,CAACkB,WAAW,CAAC,CAAC;MAC1B,OAAO,IAAI;IACf;EACJ,CAAC;EAED,MAAMP,cAAcA,CAAA,EAAG;IACnB,MAAMN,QAAQ,GAAG,MAAMN,SAAS,CAACsB,GAAG,CAAC,gBAAgB,CAAC;IACtDC,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAElB,QAAQ,CAACG,IAAI,CAAC;IAC5C,OAAOH,QAAQ,CAACG,IAAI;EACxB;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}