{"ast":null,"code":"var _jsxFileName = \"/Users/dave/Public/5minutegames/src/utils/DataContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useEffect, useState } from 'react';\nimport { games } from '../games';\nimport { dataService } from './dataService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DataContext = /*#__PURE__*/createContext();\nexport const DataProvider = ({\n  children\n}) => {\n  _s();\n  const today = new Date().toISOString().split(\"T\")[0];\n  dataService.init(today);\n  const [userData, setUserData] = useState(null);\n  const [gameIdPlayEditing, setGameIdPlayEditing] = useState(null);\n\n  // Check user authentication state on load\n  useEffect(() => {\n    return dataService.checkAutoLogin(setUserData);\n  }, []);\n  const signInWithGoogle = async onComplete => {\n    try {\n      await dataService.signInWithGoogle();\n      onComplete();\n    } catch (error) {\n      console.error(\"Error signing in with Google:\", error);\n    }\n  };\n  const signOutUser = async () => {\n    try {\n      await dataService.signOutUser();\n      setUserData(null);\n    } catch (error) {\n      console.error(\"Error signing out:\", error);\n    }\n  };\n  const signUpWithEmail = async (email, password, username, character, color, onComplete) => {\n    try {\n      const newUserData = await dataService.signUpWithEmail(email, password, username, character, color);\n      setUserData(newUserData);\n      onComplete();\n    } catch (error) {\n      console.error(\"Error signing up:\", error.message);\n    }\n  };\n  const signInWithEmail = async (email, password, onComplete) => {\n    try {\n      const newUserData = await dataService.signInWithEmail(email, password);\n      console.log(\"sign in\", newUserData);\n      setUserData(newUserData);\n      onComplete();\n    } catch (error) {\n      console.error(\"Error signing in:\", error.message);\n    }\n  };\n  const setPreferences = async newPreferences => {\n    try {\n      await dataService.setPreferences(newPreferences);\n      const newUserData = {\n        ...userData,\n        preferences: newPreferences\n      };\n      setUserData(newUserData);\n    } catch (error) {\n      console.error(\"Error updating preferences:\", error);\n    }\n  };\n  const setFavorites = async newFavorites => {\n    try {\n      await dataService.setFavorites(newFavorites);\n      const newUserData = {\n        ...userData,\n        favorites: newFavorites\n      };\n      setUserData(newUserData);\n    } catch (error) {\n      console.error(\"Error updating favorites:\", error);\n    }\n  };\n  async function addFavorite(id) {\n    try {\n      await dataService.addFavorite(id);\n      setUserData(prevUserData => ({\n        ...prevUserData,\n        favorites: [...prevUserData.favorites, id]\n      }));\n    } catch (error) {\n      console.error(\"Error adding favorite:\", error);\n    }\n  }\n  async function removeFavorite(id) {\n    try {\n      await dataService.removeFavorite(id);\n      setUserData(prevUserData => ({\n        ...prevUserData,\n        favorites: prevUserData.favorites.filter(item => item !== id)\n      }));\n    } catch (error) {\n      console.error(\"Error removing favorite:\", error);\n    }\n  }\n  const setFriends = async updatedFriends => {\n    try {\n      // This function is now primarily for updating the local state\n      // The actual API calls for adding/removing are handled in addFriend/removeFriend\n      setUserData(prevUserData => ({\n        ...prevUserData,\n        friends: updatedFriends\n      }));\n    } catch (error) {\n      console.error(\"Error updating friends:\", error);\n    }\n  };\n  async function addFriend(username) {\n    try {\n      const updatedUserData = await dataService.addFriend(username);\n      if (updatedUserData) {\n        setUserData(updatedUserData);\n        return true;\n      }\n      return false;\n    } catch (error) {\n      console.error(\"Error adding friend:\", error);\n      return false;\n    }\n  }\n  async function removeFriend(id) {\n    try {\n      const updatedUserData = await dataService.removeFriend(id);\n      if (updatedUserData) {\n        setUserData(updatedUserData);\n      }\n    } catch (error) {\n      console.error(\"Error removing friend:\", error);\n    }\n  }\n  function setGameToEditPlay(id) {\n    setGameIdPlayEditing(id);\n  }\n  async function updatePlay(score, message) {\n    console.log(\"update play:\" + score + \" --- \" + message);\n    try {\n      await dataService.updatePlay(gameIdPlayEditing, score, message);\n      const newTodayPlays = {\n        ...userData.todayPlays\n      };\n      newTodayPlays[gameIdPlayEditing] = {\n        score,\n        message\n      };\n      console.log(newTodayPlays);\n      const newUserData = {\n        ...userData,\n        todayPlays: newTodayPlays\n      };\n      setUserData(newUserData);\n    } catch (error) {\n      console.error(\"Error updating preferences:\", error);\n    }\n    setGameIdPlayEditing(null);\n  }\n  async function cancelEditPlay() {\n    setGameIdPlayEditing(null);\n  }\n  return /*#__PURE__*/_jsxDEV(DataContext.Provider, {\n    value: {\n      signInWithGoogle,\n      signOutUser,\n      signUpWithEmail,\n      signInWithEmail,\n      games,\n      userData,\n      setPreferences,\n      addFavorite,\n      removeFavorite,\n      addFriend,\n      removeFriend,\n      setGameToEditPlay,\n      gameIdPlayEditing,\n      updatePlay,\n      cancelEditPlay\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 171,\n    columnNumber: 9\n  }, this);\n};\n_s(DataProvider, \"99pfOzDrDU7f+cHXjUAz8sYxMhk=\");\n_c = DataProvider;\nexport const useData = () => {\n  _s2();\n  return useContext(DataContext);\n};\n_s2(useData, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"DataProvider\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","games","dataService","jsxDEV","_jsxDEV","DataContext","DataProvider","children","_s","today","Date","toISOString","split","init","userData","setUserData","gameIdPlayEditing","setGameIdPlayEditing","checkAutoLogin","signInWithGoogle","onComplete","error","console","signOutUser","signUpWithEmail","email","password","username","character","color","newUserData","message","signInWithEmail","log","setPreferences","newPreferences","preferences","setFavorites","newFavorites","favorites","addFavorite","id","prevUserData","removeFavorite","filter","item","setFriends","updatedFriends","friends","addFriend","updatedUserData","removeFriend","setGameToEditPlay","updatePlay","score","newTodayPlays","todayPlays","cancelEditPlay","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useData","_s2","$RefreshReg$"],"sources":["/Users/dave/Public/5minutegames/src/utils/DataContext.js"],"sourcesContent":["\nimport React, { createContext, useContext, useEffect, useState } from 'react';\nimport { games } from '../games';\nimport { dataService } from './dataService';\n\n\nconst DataContext = createContext();\n\nexport const DataProvider = ({ children }) => {\n\n    const today = new Date().toISOString().split(\"T\")[0];\n    dataService.init(today);\n\n    const [userData, setUserData] = useState(null);\n    const [gameIdPlayEditing, setGameIdPlayEditing] = useState(null);\n  \n    // Check user authentication state on load\n    useEffect(() => {\n        return dataService.checkAutoLogin(setUserData);\n    }, []);\n\n    const signInWithGoogle = async (onComplete) => {\n        try {\n            await dataService.signInWithGoogle();\n            onComplete();\n        }\n        catch  (error) {\n            console.error(\"Error signing in with Google:\", error);\n        }\n    };\n      \n    const signOutUser = async () => {\n        try {\n            await dataService.signOutUser();\n            setUserData(null);\n        } catch (error) {\n            console.error(\"Error signing out:\", error);\n        }\n    };\n      \n    const signUpWithEmail = async (email, password, username, character, color, onComplete) => {\n        try {\n            const newUserData = await dataService.signUpWithEmail(email, password, username, character, color);\n            setUserData(newUserData);\n            onComplete();\n        } catch (error) {\n          console.error(\"Error signing up:\", error.message);\n        }\n    };\n      \n    const signInWithEmail = async (email, password, onComplete) => {\n        try {\n            const newUserData = await dataService.signInWithEmail(email, password);\n            console.log(\"sign in\",newUserData)\n            setUserData(newUserData);\n            onComplete();\n        } catch (error) {\n            console.error(\"Error signing in:\", error.message);\n        }\n    };\n      \n    const setPreferences = async (newPreferences) => {\n        try {\n            await dataService.setPreferences(newPreferences);\n            const newUserData = { ...userData, preferences: newPreferences };\n            setUserData(newUserData);\n        } catch (error) {\n            console.error(\"Error updating preferences:\", error);\n        }\n    }\n\n    const setFavorites = async (newFavorites) => {\n        try {\n            await dataService.setFavorites(newFavorites);\n            const newUserData = { ...userData, favorites: newFavorites };\n            setUserData(newUserData);\n        } catch (error) {\n            console.error(\"Error updating favorites:\", error);\n        }\n    }\n\n    async function addFavorite(id) {\n        try {\n            await dataService.addFavorite(id);\n            setUserData(prevUserData => ({\n                ...prevUserData,\n                favorites: [...prevUserData.favorites, id]\n            }));\n        } catch (error) {\n            console.error(\"Error adding favorite:\", error);\n        }\n    }\n\n    async function removeFavorite(id) {\n        try {\n            await dataService.removeFavorite(id);\n            setUserData(prevUserData => ({\n                ...prevUserData,\n                favorites: prevUserData.favorites.filter(item => item !== id)\n            }));\n        } catch (error) {\n            console.error(\"Error removing favorite:\", error);\n        }\n    }\n\n    const setFriends = async (updatedFriends) => {\n        try {\n            // This function is now primarily for updating the local state\n            // The actual API calls for adding/removing are handled in addFriend/removeFriend\n            setUserData(prevUserData => ({\n                ...prevUserData,\n                friends: updatedFriends\n            }));\n        } catch (error) {\n            console.error(\"Error updating friends:\", error);\n        }\n    }\n\n    async function addFriend(username) {\n        try {\n            const updatedUserData = await dataService.addFriend(username);\n            if (updatedUserData) {\n                setUserData(updatedUserData);\n                return true;\n            }\n            return false;\n        } catch (error) {\n            console.error(\"Error adding friend:\", error);\n            return false;\n        }\n    }\n\n    async function removeFriend(id) {\n        try {\n            const updatedUserData = await dataService.removeFriend(id);\n            if (updatedUserData) {\n                setUserData(updatedUserData);\n            }\n        } catch (error) {\n            console.error(\"Error removing friend:\", error);\n        }\n    }\n\n    function setGameToEditPlay(id) {\n        setGameIdPlayEditing(id);\n    }\n\n    async function updatePlay(score, message) {\n        console.log(\"update play:\"+score+\" --- \"+message);\n\n        try {\n            await dataService.updatePlay(gameIdPlayEditing, score, message);\n            \n            const newTodayPlays = {...userData.todayPlays};\n            newTodayPlays[gameIdPlayEditing] = {score, message};\n            console.log(newTodayPlays);\n            const newUserData = { ...userData, todayPlays: newTodayPlays };\n            setUserData(newUserData);\n        } catch (error) {\n            console.error(\"Error updating preferences:\", error);\n        }\n\n        setGameIdPlayEditing(null);\n    }\n\n    async function cancelEditPlay() {\n        setGameIdPlayEditing(null);\n    }\n  \n    return (\n        <DataContext.Provider value={{ \n            signInWithGoogle, \n            signOutUser, \n            signUpWithEmail, \n            signInWithEmail,\n            games,\n            userData,\n            setPreferences,\n            addFavorite,\n            removeFavorite,\n            addFriend,\n            removeFriend,\n            setGameToEditPlay,\n            gameIdPlayEditing,\n            updatePlay,\n            cancelEditPlay\n        }}>\n            {children}\n        </DataContext.Provider>\n    );\n  };\n\n  export const useData = () => useContext(DataContext);"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}