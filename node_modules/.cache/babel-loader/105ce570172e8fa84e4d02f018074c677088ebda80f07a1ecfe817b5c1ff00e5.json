{"ast":null,"code":"import { tokenManager } from './tokenManager';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'https://localhost:5001/api';\nclass ApiClient {\n  async request(endpoint, options = {}) {\n    const url = `${API_BASE_URL}${endpoint}`;\n    const token = tokenManager.getToken();\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        ...(token && {\n          Authorization: `Bearer ${token}`\n        }),\n        ...options.headers\n      },\n      ...options\n    };\n    const response = await fetch(url, config);\n    if (response.status === 401) {\n      const refreshed = await this.refreshToken();\n      if (refreshed) {\n        config.headers.Authorization = `Bearer ${tokenManager.getToken()}`;\n        return this.handleResponse(await fetch(url, config));\n      }\n      throw new Error('Authentication failed');\n    }\n    return this.handleResponse(response);\n  }\n  async handleResponse(response) {\n    const data = await response.json();\n    if (!response.ok) {\n      throw new Error(data.message || `HTTP error! status: ${response.status}`);\n    }\n    return data;\n  }\n  async refreshToken() {\n    const refreshToken = tokenManager.getRefreshToken();\n    if (!refreshToken) return false;\n    try {\n      const response = await fetch(`${API_BASE_URL}/auth/refresh`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          refreshToken\n        })\n      });\n      if (response.ok) {\n        const data = await response.json();\n        tokenManager.setTokens(data.data.token, data.data.refreshToken);\n        return true;\n      }\n    } catch (error) {\n      console.error('Token refresh failed:', error);\n    }\n    tokenManager.clearTokens();\n    return false;\n  }\n  get(endpoint) {\n    return this.request(endpoint, {\n      method: 'GET'\n    });\n  }\n  post(endpoint, data) {\n    return this.request(endpoint, {\n      method: 'POST',\n      body: JSON.stringify(data)\n    });\n  }\n  put(endpoint, data) {\n    return this.request(endpoint, {\n      method: 'PUT',\n      body: JSON.stringify(data)\n    });\n  }\n  delete(endpoint) {\n    return this.request(endpoint, {\n      method: 'DELETE'\n    });\n  }\n}\nexport const apiClient = new ApiClient();","map":{"version":3,"names":["tokenManager","API_BASE_URL","process","env","REACT_APP_API_URL","ApiClient","request","endpoint","options","url","token","getToken","config","headers","Authorization","response","fetch","status","refreshed","refreshToken","handleResponse","Error","data","json","ok","message","getRefreshToken","method","body","JSON","stringify","setTokens","error","console","clearTokens","get","post","put","delete","apiClient"],"sources":["/Users/dave/Documents/web-games/5-minute-games/src/services/apiClient.js"],"sourcesContent":["import { tokenManager } from './tokenManager';\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'https://localhost:5001/api';\n\nclass ApiClient {\n    async request(endpoint, options = {}) {\n        const url = `${API_BASE_URL}${endpoint}`;\n        const token = tokenManager.getToken();\n        \n        const config = {\n            headers: {\n                'Content-Type': 'application/json',\n                ...(token && { Authorization: `Bearer ${token}` }),\n                ...options.headers,\n            },\n            ...options,\n        };\n\n        const response = await fetch(url, config);\n        \n        if (response.status === 401) {\n            const refreshed = await this.refreshToken();\n            if (refreshed) {\n                config.headers.Authorization = `Bearer ${tokenManager.getToken()}`;\n                return this.handleResponse(await fetch(url, config));\n            }\n            throw new Error('Authentication failed');\n        }\n\n        return this.handleResponse(response);\n    }\n\n    async handleResponse(response) {\n        const data = await response.json();\n        if (!response.ok) {\n            throw new Error(data.message || `HTTP error! status: ${response.status}`);\n        }\n        return data;\n    }\n\n    async refreshToken() {\n        const refreshToken = tokenManager.getRefreshToken();\n        if (!refreshToken) return false;\n\n        try {\n            const response = await fetch(`${API_BASE_URL}/auth/refresh`, {\n                method: 'POST',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify({ refreshToken }),\n            });\n\n            if (response.ok) {\n                const data = await response.json();\n                tokenManager.setTokens(data.data.token, data.data.refreshToken);\n                return true;\n            }\n        } catch (error) {\n            console.error('Token refresh failed:', error);\n        }\n\n        tokenManager.clearTokens();\n        return false;\n    }\n\n    get(endpoint) { \n        return this.request(endpoint, { method: 'GET' }); \n    }\n    \n    post(endpoint, data) { \n        return this.request(endpoint, { \n            method: 'POST', \n            body: JSON.stringify(data) \n        }); \n    }\n    \n    put(endpoint, data) { \n        return this.request(endpoint, { \n            method: 'PUT', \n            body: JSON.stringify(data) \n        }); \n    }\n    \n    delete(endpoint) { \n        return this.request(endpoint, { method: 'DELETE' }); \n    }\n}\n\nexport const apiClient = new ApiClient();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}