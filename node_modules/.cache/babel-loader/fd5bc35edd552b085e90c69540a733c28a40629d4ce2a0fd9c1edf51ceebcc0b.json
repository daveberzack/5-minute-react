{"ast":null,"code":"import { initializeApp } from \"firebase/app\";\nimport { getAuth, setPersistence, browserLocalPersistence, createUserWithEmailAndPassword, signInWithEmailAndPassword, GoogleAuthProvider, signInWithPopup, signOut } from \"firebase/auth\";\nimport { getFirestore, doc, collection, setDoc, getDoc, updateDoc, query, where, getDocs } from \"firebase/firestore\";\nconst firebaseConfig = {\n  apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\n  authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\n  projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,\n  appId: process.env.REACT_APP_FIREBASE_APP_ID,\n  measurementId: process.env.REACT_APP_FIREBASE_MEASUREMENT_ID\n};\nconst app = initializeApp(firebaseConfig);\nconst auth = getAuth(app);\nconst db = getFirestore(app);\nlet today = \"\";\nlet userCredential = {};\nexport const firebase = {\n  init: function (todayString) {\n    today = todayString;\n  },\n  checkAutoLogin: function (setUserData) {\n    console.log(\"auto\");\n    // Set persistence to local storage to ensure user stays logged in\n    setPersistence(auth, browserLocalPersistence).then(() => {\n      console.log(\"Persistence set to browserLocalPersistence\");\n    }).catch(error => {\n      console.error(\"Error setting persistence:\", error);\n    });\n    const unsubscribe = auth.onAuthStateChanged(async initialUserCredential => {\n      userCredential = initialUserCredential;\n      if (initialUserCredential) {\n        console.log(\"User is signed in:\", initialUserCredential.uid);\n        const newUserData = await this.loadData();\n        setUserData(newUserData);\n        console.log(\"auto newUserData\", newUserData);\n      } else {\n        console.log(\"No user is signed in\");\n        setUserData(null);\n      }\n    });\n    return () => unsubscribe();\n  },\n  signInWithGoogle: async function () {\n    const provider = new GoogleAuthProvider();\n    await signInWithPopup(auth, provider);\n  },\n  signOutUser: async function () {\n    await signOut(auth);\n  },\n  signUpWithEmail: async function (email, password, username, character, color) {\n    const existingUser = await this.findUserByUsername(username);\n    if (existingUser) {\n      throw new Error(\"username exists\");\n    }\n    userCredential = await createUserWithEmailAndPassword(auth, email, password);\n    const userRef = doc(db, 'users', userCredential.user.uid); // Reference to the user's document\n    await setDoc(userRef, {\n      username: username,\n      character: character,\n      color: color,\n      favorites: [],\n      friendIds: [],\n      preferences: {\n        showOther: true\n      }\n    });\n    return this.loadData();\n  },\n  signInWithEmail: async function (email, password) {\n    await setPersistence(auth, browserLocalPersistence);\n    userCredential = await signInWithEmailAndPassword(auth, email, password);\n    return this.loadData();\n  },\n  findUserByUsername: async function (username) {\n    const usersRef = collection(db, 'users');\n    const q = query(usersRef, where('username', '==', username));\n    const querySnapshot = await getDocs(q);\n    if (!querySnapshot.empty) {\n      const userDoc = querySnapshot.docs[0];\n      return {\n        id: userDoc.id,\n        ...userDoc.data()\n      };\n    } else {\n      return null;\n    }\n  },\n  loadData: async function () {\n    var _userCredential;\n    const thisUser = auth.currentUser || ((_userCredential = userCredential) === null || _userCredential === void 0 ? void 0 : _userCredential.user);\n    let newUserData = null;\n    if (db && thisUser !== null && thisUser !== void 0 && thisUser.uid) {\n      var _newUserData;\n      const userRef = doc(db, \"users\", thisUser.uid);\n      const userSnap = await getDoc(userRef);\n      if (userSnap.exists()) {\n        newUserData = userSnap.data();\n      }\n      const todayRef = doc(db, \"users\", thisUser.uid, \"plays\", today);\n      const todaySnapshot = await getDoc(todayRef);\n      newUserData.todayPlays = todaySnapshot.data() || [];\n      console.log(\"newUserData before\", newUserData);\n      const friendIds = ((_newUserData = newUserData) === null || _newUserData === void 0 ? void 0 : _newUserData.friendIds) || [];\n      newUserData.friends = [];\n      for (let friendId of friendIds) {\n        const friendRef = doc(db, \"users\", friendId);\n        const friendSnap = await getDoc(friendRef);\n        if (friendSnap.exists()) {\n          const friendData = friendSnap.data();\n          newUserData.friends.push({\n            id: friendId,\n            username: friendData.username || ''\n          });\n        }\n      }\n      console.log(\"after\", newUserData);\n    }\n    return newUserData;\n  },\n  setPreferences: async function (newPreferences) {\n    const userCredential = auth.currentUser;\n    if (!userCredential) throw new Error(\"User Not Found\");\n    const userDocRef = doc(db, \"users\", userCredential.uid);\n    await updateDoc(userDocRef, {\n      preferences: newPreferences\n    });\n  },\n  setFavorites: async function (newFavorites) {\n    const userCredential = auth.currentUser;\n    if (!userCredential) throw new Error(\"User Not Found\");\n    const userDocRef = doc(db, \"users\", userCredential.uid);\n    await updateDoc(userDocRef, {\n      favorites: newFavorites\n    });\n  },\n  setFriends: async function (newFriendIds) {\n    console.log(\"setFriends\", newFriendIds);\n    const userCredential = auth.currentUser;\n    if (!userCredential) throw new Error(\"User Not Found\");\n    const userDocRef = doc(db, \"users\", userCredential.uid);\n    await updateDoc(userDocRef, {\n      friendIds: newFriendIds\n    });\n  },\n  updatePlay: async function (gameId, score, message) {\n    const userCredential = auth.currentUser;\n    if (!userCredential) throw new Error(\"User Not Found\");\n\n    // const userDocRef = doc(db, \"users\", userCredential.uid);\n    // await updateDoc(userDocRef, { favorites: newFavorites });\n    const playDocRef = doc(db, \"users\", userCredential.uid, \"plays\", today);\n    await updateDoc(playDocRef, {\n      [`${gameId}.score`]: score,\n      [`${gameId}.message`]: message\n    });\n  }\n};","map":{"version":3,"names":["initializeApp","getAuth","setPersistence","browserLocalPersistence","createUserWithEmailAndPassword","signInWithEmailAndPassword","GoogleAuthProvider","signInWithPopup","signOut","getFirestore","doc","collection","setDoc","getDoc","updateDoc","query","where","getDocs","firebaseConfig","apiKey","process","env","REACT_APP_FIREBASE_API_KEY","authDomain","REACT_APP_FIREBASE_AUTH_DOMAIN","projectId","REACT_APP_FIREBASE_PROJECT_ID","storageBucket","REACT_APP_FIREBASE_STORAGE_BUCKET","messagingSenderId","REACT_APP_FIREBASE_MESSAGING_SENDER_ID","appId","REACT_APP_FIREBASE_APP_ID","measurementId","REACT_APP_FIREBASE_MEASUREMENT_ID","app","auth","db","today","userCredential","firebase","init","todayString","checkAutoLogin","setUserData","console","log","then","catch","error","unsubscribe","onAuthStateChanged","initialUserCredential","uid","newUserData","loadData","signInWithGoogle","provider","signOutUser","signUpWithEmail","email","password","username","character","color","existingUser","findUserByUsername","Error","userRef","user","favorites","friendIds","preferences","showOther","signInWithEmail","usersRef","q","querySnapshot","empty","userDoc","docs","id","data","_userCredential","thisUser","currentUser","_newUserData","userSnap","exists","todayRef","todaySnapshot","todayPlays","friends","friendId","friendRef","friendSnap","friendData","push","setPreferences","newPreferences","userDocRef","setFavorites","newFavorites","setFriends","newFriendIds","updatePlay","gameId","score","message","playDocRef"],"sources":["/Users/dave/Public/5minutegames/src/utils/firebase.js"],"sourcesContent":["import { initializeApp } from \"firebase/app\";\nimport { getAuth, setPersistence, browserLocalPersistence, createUserWithEmailAndPassword, signInWithEmailAndPassword, GoogleAuthProvider, signInWithPopup, signOut } from \"firebase/auth\";\nimport { getFirestore, doc, collection, setDoc, getDoc, updateDoc, query, where, getDocs } from \"firebase/firestore\";\n\nconst firebaseConfig = {\n    apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\n    authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\n    projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\n    storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\n    messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,\n    appId: process.env.REACT_APP_FIREBASE_APP_ID,\n    measurementId: process.env.REACT_APP_FIREBASE_MEASUREMENT_ID\n};\n\nconst app = initializeApp(firebaseConfig);\nconst auth = getAuth(app);\nconst db = getFirestore(app);\nlet today = \"\";\nlet userCredential = {};\n\nexport const firebase = {\n\n    init: function(todayString){\n        today = todayString;\n    },\n\n    checkAutoLogin: function(setUserData){\n        console.log(\"auto\");\n        // Set persistence to local storage to ensure user stays logged in\n        setPersistence(auth, browserLocalPersistence)\n            .then(() => {\n                console.log(\"Persistence set to browserLocalPersistence\");\n            })\n            .catch((error) => {\n                console.error(\"Error setting persistence:\", error);\n            });\n            \n        const unsubscribe = auth.onAuthStateChanged(async (initialUserCredential) => {\n            userCredential = initialUserCredential;\n            if (initialUserCredential) {\n                console.log(\"User is signed in:\", initialUserCredential.uid);\n                const newUserData = await this.loadData();\n                setUserData(newUserData);\n                console.log(\"auto newUserData\", newUserData);\n            } else {\n                console.log(\"No user is signed in\");\n                setUserData(null);\n            }\n        });\n        return () => unsubscribe();\n    },\n\n    signInWithGoogle: async function(){\n        const provider = new GoogleAuthProvider();\n        await signInWithPopup(auth, provider);\n    },\n    \n    signOutUser: async function(){\n        await signOut(auth);\n    },\n\n    signUpWithEmail: async function(email, password, username, character, color){\n        const existingUser = await this.findUserByUsername(username);\n        if (existingUser) {\n            throw(new Error(\"username exists\"));\n        }\n        userCredential = await createUserWithEmailAndPassword(auth, email, password);\n        \n        const userRef = doc(db, 'users', userCredential.user.uid); // Reference to the user's document\n        await setDoc(userRef, {\n            username: username,\n            character: character,\n            color: color,\n            favorites: [],\n            friendIds: [],\n            preferences: {\n                showOther: true\n            }\n        });\n\n        return this.loadData()\n    },\n      \n    signInWithEmail: async function(email, password){\n        await setPersistence(auth, browserLocalPersistence);\n        userCredential = await signInWithEmailAndPassword(auth, email, password);\n        return this.loadData()\n    },\n\n    findUserByUsername: async function(username) {\n        const usersRef = collection(db, 'users');\n        const q = query(usersRef, where('username', '==', username));\n        const querySnapshot = await getDocs(q);\n        \n        if (!querySnapshot.empty) {\n            const userDoc = querySnapshot.docs[0];\n            return { id: userDoc.id, ...userDoc.data() };\n          } else {\n            return null;\n        }\n    },\n\n    loadData: async function(){\n        const thisUser = auth.currentUser || userCredential?.user;\n        let newUserData = null;\n      \n        if (db && thisUser?.uid){\n            const userRef = doc(db, \"users\", thisUser.uid);\n            const userSnap = await getDoc(userRef);\n            if (userSnap.exists()) {\n                newUserData = userSnap.data();\n            }\n            \n            const todayRef = doc(db, \"users\", thisUser.uid, \"plays\", today);\n            const todaySnapshot = await getDoc(todayRef);\n            newUserData.todayPlays = todaySnapshot.data() || [];\n\n            console.log(\"newUserData before\",newUserData);\n            const friendIds = newUserData?.friendIds || [];\n            newUserData.friends = [];\n\n            for (let friendId of friendIds) {\n                const friendRef = doc(db, \"users\", friendId);\n                const friendSnap = await getDoc(friendRef);\n                if (friendSnap.exists()) {\n                    const friendData = friendSnap.data();\n                    newUserData.friends.push({\n                        id: friendId,\n                        username: friendData.username || '',\n                    });\n                }\n            }\n            console.log(\"after\",newUserData);\n\n        }\n        return newUserData;\n    },\n\n    setPreferences: async function (newPreferences){\n        const userCredential = auth.currentUser;\n        if (!userCredential) throw new Error(\"User Not Found\");\n\n        const userDocRef = doc(db, \"users\", userCredential.uid);\n        await updateDoc(userDocRef, { preferences: newPreferences });\n    },\n\n    setFavorites: async function(newFavorites){\n        const userCredential = auth.currentUser;\n        if (!userCredential) throw new Error(\"User Not Found\");\n\n        const userDocRef = doc(db, \"users\", userCredential.uid);\n        await updateDoc(userDocRef, { favorites: newFavorites });\n    },\n\n    setFriends: async function(newFriendIds){\n        console.log(\"setFriends\", newFriendIds);\n        const userCredential = auth.currentUser;\n        if (!userCredential) throw new Error(\"User Not Found\");\n\n        const userDocRef = doc(db, \"users\", userCredential.uid);\n        await updateDoc(userDocRef, { friendIds: newFriendIds });\n    },\n\n    updatePlay: async function(gameId, score, message) {\n        const userCredential = auth.currentUser;\n        if (!userCredential) throw new Error(\"User Not Found\");\n\n        // const userDocRef = doc(db, \"users\", userCredential.uid);\n        // await updateDoc(userDocRef, { favorites: newFavorites });\n        const playDocRef = doc(db, \"users\", userCredential.uid, \"plays\", today);\n        await updateDoc(playDocRef, {\n            [`${gameId}.score`]: score,\n            [`${gameId}.message`]: message,\n        });\n        \n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}