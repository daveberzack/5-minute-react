{"ast":null,"code":"// API-based data service to replace Firebase\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'https://localhost:5001/api';\nlet today = \"\";\nlet currentUser = null;\n\n// Token management\nconst getToken = () => localStorage.getItem('authToken');\nconst setToken = token => localStorage.setItem('authToken', token);\nconst removeToken = () => localStorage.removeItem('authToken');\nconst getRefreshToken = () => localStorage.getItem('refreshToken');\nconst setRefreshToken = token => localStorage.setItem('refreshToken', token);\nconst removeRefreshToken = () => localStorage.removeItem('refreshToken');\n\n// HTTP client with automatic token handling\nconst apiClient = {\n  async request(endpoint, options = {}) {\n    const url = `${API_BASE_URL}${endpoint}`;\n    const token = getToken();\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        ...(token && {\n          Authorization: `Bearer ${token}`\n        }),\n        ...options.headers\n      },\n      ...options\n    };\n    try {\n      const response = await fetch(url, config);\n\n      // Handle token expiration\n      if (response.status === 401) {\n        const refreshed = await this.refreshToken();\n        if (refreshed) {\n          // Retry the original request with new token\n          config.headers.Authorization = `Bearer ${getToken()}`;\n          const retryResponse = await fetch(url, config);\n          return await this.handleResponse(retryResponse);\n        } else {\n          // Refresh failed, redirect to login\n          removeToken();\n          removeRefreshToken();\n          currentUser = null;\n          throw new Error('Authentication failed');\n        }\n      }\n      return await this.handleResponse(response);\n    } catch (error) {\n      console.error('API request failed:', error);\n      throw error;\n    }\n  },\n  async handleResponse(response) {\n    const data = await response.json();\n    if (!response.ok) {\n      throw new Error(data.message || `HTTP error! status: ${response.status}`);\n    }\n    return data;\n  },\n  async refreshToken() {\n    const refreshToken = getRefreshToken();\n    if (!refreshToken) return false;\n    try {\n      const response = await fetch(`${API_BASE_URL}/auth/refresh`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          refreshToken\n        })\n      });\n      if (response.ok) {\n        const data = await response.json();\n        setToken(data.data.token);\n        setRefreshToken(data.data.refreshToken);\n        return true;\n      }\n    } catch (error) {\n      console.error('Token refresh failed:', error);\n    }\n    return false;\n  },\n  get(endpoint) {\n    return this.request(endpoint, {\n      method: 'GET'\n    });\n  },\n  post(endpoint, data) {\n    return this.request(endpoint, {\n      method: 'POST',\n      body: JSON.stringify(data)\n    });\n  },\n  put(endpoint, data) {\n    return this.request(endpoint, {\n      method: 'PUT',\n      body: JSON.stringify(data)\n    });\n  },\n  delete(endpoint) {\n    return this.request(endpoint, {\n      method: 'DELETE'\n    });\n  }\n};\nexport const dataService = {\n  getToday() {\n    return new Date().toISOString().split(\"T\")[0];\n  },\n  checkAutoLogin: function (setUserData) {\n    console.log(\"auto\");\n\n    // Check if we have a stored token\n    const token = getToken();\n    if (token) {\n      // Try to get user profile to validate token\n      this.loadData().then(userData => {\n        if (userData) {\n          currentUser = userData;\n          setUserData(userData);\n          console.log(\"auto newUserData\", userData);\n        } else {\n          setUserData(null);\n        }\n      }).catch(error => {\n        console.error(\"Auto-login failed:\", error);\n        removeToken();\n        removeRefreshToken();\n        setUserData(null);\n      });\n    } else {\n      console.log(\"No stored token found\");\n      setUserData(null);\n    }\n\n    // Return a cleanup function (Firebase compatibility)\n    return () => {};\n  },\n  signInWithGoogle: async function () {\n    // This would need to be implemented with Google OAuth\n    // For now, we'll throw an error to indicate it needs implementation\n    throw new Error(\"Google sign-in needs to be implemented with Google OAuth flow\");\n  },\n  signOutUser: async function () {\n    try {\n      const refreshToken = getRefreshToken();\n      if (refreshToken) {\n        await apiClient.post('/auth/logout', {\n          refreshToken\n        });\n      }\n    } catch (error) {\n      console.error(\"Logout API call failed:\", error);\n    } finally {\n      removeToken();\n      removeRefreshToken();\n      currentUser = null;\n    }\n  },\n  signUpWithEmail: async function (email, password, username, character, color) {\n    try {\n      const response = await apiClient.post('/auth/register', {\n        email,\n        password,\n        username,\n        character,\n        color\n      });\n      if (response.success) {\n        setToken(response.data.token);\n        setRefreshToken(response.data.refreshToken);\n        currentUser = response.data.user;\n        return response.data.user;\n      } else {\n        throw new Error(response.message);\n      }\n    } catch (error) {\n      console.error(\"Registration failed:\", error);\n      throw error;\n    }\n  },\n  signInWithEmail: async function (email, password) {\n    try {\n      const response = await apiClient.post('/auth/login', {\n        email,\n        password\n      });\n      if (response.success) {\n        setToken(response.data.token);\n        setRefreshToken(response.data.refreshToken);\n        currentUser = response.data.user;\n        return response.data.user;\n      } else {\n        throw new Error(response.message);\n      }\n    } catch (error) {\n      console.error(\"Login failed:\", error);\n      throw error;\n    }\n  },\n  findUserByUsername: async function (username) {\n    try {\n      const response = await apiClient.get(`/users/search/${encodeURIComponent(username)}`);\n      return response.success ? response.data : null;\n    } catch (error) {\n      console.error(\"User search failed:\", error);\n      return null;\n    }\n  },\n  loadData: async function () {\n    try {\n      const response = await apiClient.get('/users/profile');\n      if (response.success) {\n        currentUser = response.data;\n        return response.data;\n      }\n      return null;\n    } catch (error) {\n      console.error(\"Load data failed:\", error);\n      return null;\n    }\n  },\n  setPreferences: async function (newPreferences) {\n    try {\n      const response = await apiClient.put('/users/preferences', newPreferences);\n      if (response.success) {\n        currentUser = response.data;\n      }\n    } catch (error) {\n      console.error(\"Set preferences failed:\", error);\n      throw error;\n    }\n  },\n  addFavorite: async function (gameId) {\n    try {\n      const response = await apiClient.post(`/favorites/${gameId}`);\n      if (response.success) {\n        currentUser = response.data;\n        return response.data;\n      }\n      throw new Error(response.message);\n    } catch (error) {\n      console.error(\"Add favorite failed:\", error);\n      throw error;\n    }\n  },\n  removeFavorite: async function (gameId) {\n    try {\n      const response = await apiClient.delete(`/favorites/${gameId}`);\n      if (response.success) {\n        currentUser = response.data;\n        return response.data;\n      }\n      throw new Error(response.message);\n    } catch (error) {\n      console.error(\"Remove favorite failed:\", error);\n      throw error;\n    }\n  },\n  setFriends: async function (newFriendIds) {\n    // This is complex since we need to handle adding/removing friends\n    // For now, we'll reload the data after the operation\n    try {\n      // The friends management is handled through addFriend/removeFriend\n      // This method is called after those operations, so we just reload\n      const userData = await this.loadData();\n      currentUser = userData;\n    } catch (error) {\n      console.error(\"Set friends failed:\", error);\n      throw error;\n    }\n  },\n  addFriend: async function (username) {\n    try {\n      const response = await apiClient.post('/friends', {\n        username\n      });\n      if (response.success) {\n        currentUser = response.data;\n        return response.data;\n      }\n      throw new Error(response.message);\n    } catch (error) {\n      console.error(\"Add friend failed:\", error);\n      throw error;\n    }\n  },\n  removeFriend: async function (friendId) {\n    try {\n      const response = await apiClient.delete(`/friends/${friendId}`);\n      if (response.success) {\n        currentUser = response.data;\n        return response.data;\n      }\n    } catch (error) {\n      console.error(\"Remove friend failed:\", error);\n      throw error;\n    }\n  },\n  updatePlay: async function (gameId, score, message) {\n    try {\n      const response = await apiClient.put(`/plays/${gameId}`, {\n        score,\n        message\n      });\n      if (response.success) {\n        currentUser = response.data;\n      }\n    } catch (error) {\n      console.error(\"Update play failed:\", error);\n      throw error;\n    }\n  }\n};","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_API_URL","today","currentUser","getToken","localStorage","getItem","setToken","token","setItem","removeToken","removeItem","getRefreshToken","setRefreshToken","removeRefreshToken","apiClient","request","endpoint","options","url","config","headers","Authorization","response","fetch","status","refreshed","refreshToken","retryResponse","handleResponse","Error","error","console","data","json","ok","message","method","body","JSON","stringify","get","post","put","delete","dataService","getToday","Date","toISOString","split","checkAutoLogin","setUserData","log","loadData","then","userData","catch","signInWithGoogle","signOutUser","signUpWithEmail","email","password","username","character","color","success","user","signInWithEmail","findUserByUsername","encodeURIComponent","setPreferences","newPreferences","addFavorite","gameId","removeFavorite","setFriends","newFriendIds","addFriend","removeFriend","friendId","updatePlay","score"],"sources":["/Users/dave/Public/5minutegames/src/utils/dataService.js"],"sourcesContent":["// API-based data service to replace Firebase\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'https://localhost:5001/api';\n\nlet today = \"\";\nlet currentUser = null;\n\n// Token management\nconst getToken = () => localStorage.getItem('authToken');\nconst setToken = (token) => localStorage.setItem('authToken', token);\nconst removeToken = () => localStorage.removeItem('authToken');\nconst getRefreshToken = () => localStorage.getItem('refreshToken');\nconst setRefreshToken = (token) => localStorage.setItem('refreshToken', token);\nconst removeRefreshToken = () => localStorage.removeItem('refreshToken');\n\n// HTTP client with automatic token handling\nconst apiClient = {\n    async request(endpoint, options = {}) {\n        const url = `${API_BASE_URL}${endpoint}`;\n        const token = getToken();\n        \n        const config = {\n            headers: {\n                'Content-Type': 'application/json',\n                ...(token && { Authorization: `Bearer ${token}` }),\n                ...options.headers,\n            },\n            ...options,\n        };\n\n        try {\n            const response = await fetch(url, config);\n            \n            // Handle token expiration\n            if (response.status === 401) {\n                const refreshed = await this.refreshToken();\n                if (refreshed) {\n                    // Retry the original request with new token\n                    config.headers.Authorization = `Bearer ${getToken()}`;\n                    const retryResponse = await fetch(url, config);\n                    return await this.handleResponse(retryResponse);\n                } else {\n                    // Refresh failed, redirect to login\n                    removeToken();\n                    removeRefreshToken();\n                    currentUser = null;\n                    throw new Error('Authentication failed');\n                }\n            }\n\n            return await this.handleResponse(response);\n        } catch (error) {\n            console.error('API request failed:', error);\n            throw error;\n        }\n    },\n\n    async handleResponse(response) {\n        const data = await response.json();\n        \n        if (!response.ok) {\n            throw new Error(data.message || `HTTP error! status: ${response.status}`);\n        }\n        \n        return data;\n    },\n\n    async refreshToken() {\n        const refreshToken = getRefreshToken();\n        if (!refreshToken) return false;\n\n        try {\n            const response = await fetch(`${API_BASE_URL}/auth/refresh`, {\n                method: 'POST',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify({ refreshToken }),\n            });\n\n            if (response.ok) {\n                const data = await response.json();\n                setToken(data.data.token);\n                setRefreshToken(data.data.refreshToken);\n                return true;\n            }\n        } catch (error) {\n            console.error('Token refresh failed:', error);\n        }\n\n        return false;\n    },\n\n    get(endpoint) {\n        return this.request(endpoint, { method: 'GET' });\n    },\n\n    post(endpoint, data) {\n        return this.request(endpoint, {\n            method: 'POST',\n            body: JSON.stringify(data),\n        });\n    },\n\n    put(endpoint, data) {\n        return this.request(endpoint, {\n            method: 'PUT',\n            body: JSON.stringify(data),\n        });\n    },\n\n    delete(endpoint) {\n        return this.request(endpoint, { method: 'DELETE' });\n    },\n};\n\nexport const dataService = {\n\n    getToday() {\n        return new Date().toISOString().split(\"T\")[0];\n    },\n\n    checkAutoLogin: function(setUserData) {\n        console.log(\"auto\");\n        \n        // Check if we have a stored token\n        const token = getToken();\n        if (token) {\n            // Try to get user profile to validate token\n            this.loadData()\n                .then(userData => {\n                    if (userData) {\n                        currentUser = userData;\n                        setUserData(userData);\n                        console.log(\"auto newUserData\", userData);\n                    } else {\n                        setUserData(null);\n                    }\n                })\n                .catch(error => {\n                    console.error(\"Auto-login failed:\", error);\n                    removeToken();\n                    removeRefreshToken();\n                    setUserData(null);\n                });\n        } else {\n            console.log(\"No stored token found\");\n            setUserData(null);\n        }\n\n        // Return a cleanup function (Firebase compatibility)\n        return () => {};\n    },\n\n    signInWithGoogle: async function() {\n        // This would need to be implemented with Google OAuth\n        // For now, we'll throw an error to indicate it needs implementation\n        throw new Error(\"Google sign-in needs to be implemented with Google OAuth flow\");\n    },\n\n    signOutUser: async function() {\n        try {\n            const refreshToken = getRefreshToken();\n            if (refreshToken) {\n                await apiClient.post('/auth/logout', { refreshToken });\n            }\n        } catch (error) {\n            console.error(\"Logout API call failed:\", error);\n        } finally {\n            removeToken();\n            removeRefreshToken();\n            currentUser = null;\n        }\n    },\n\n    signUpWithEmail: async function(email, password, username, character, color) {\n        try {\n            const response = await apiClient.post('/auth/register', {\n                email,\n                password,\n                username,\n                character,\n                color\n            });\n\n            if (response.success) {\n                setToken(response.data.token);\n                setRefreshToken(response.data.refreshToken);\n                currentUser = response.data.user;\n                return response.data.user;\n            } else {\n                throw new Error(response.message);\n            }\n        } catch (error) {\n            console.error(\"Registration failed:\", error);\n            throw error;\n        }\n    },\n\n    signInWithEmail: async function(email, password) {\n        try {\n            const response = await apiClient.post('/auth/login', {\n                email,\n                password\n            });\n\n            if (response.success) {\n                setToken(response.data.token);\n                setRefreshToken(response.data.refreshToken);\n                currentUser = response.data.user;\n                return response.data.user;\n            } else {\n                throw new Error(response.message);\n            }\n        } catch (error) {\n            console.error(\"Login failed:\", error);\n            throw error;\n        }\n    },\n\n    findUserByUsername: async function(username) {\n        try {\n            const response = await apiClient.get(`/users/search/${encodeURIComponent(username)}`);\n            return response.success ? response.data : null;\n        } catch (error) {\n            console.error(\"User search failed:\", error);\n            return null;\n        }\n    },\n\n    loadData: async function() {\n        try {\n            const response = await apiClient.get('/users/profile');\n            if (response.success) {\n                currentUser = response.data;\n                return response.data;\n            }\n            return null;\n        } catch (error) {\n            console.error(\"Load data failed:\", error);\n            return null;\n        }\n    },\n\n    setPreferences: async function(newPreferences) {\n        try {\n            const response = await apiClient.put('/users/preferences', newPreferences);\n            if (response.success) {\n                currentUser = response.data;\n            }\n        } catch (error) {\n            console.error(\"Set preferences failed:\", error);\n            throw error;\n        }\n    },\n\n    addFavorite: async function(gameId) {\n        try {\n            const response = await apiClient.post(`/favorites/${gameId}`);\n            if (response.success) {\n                currentUser = response.data;\n                return response.data;\n            }\n            throw new Error(response.message);\n        } catch (error) {\n            console.error(\"Add favorite failed:\", error);\n            throw error;\n        }\n    },\n\n    removeFavorite: async function(gameId) {\n        try {\n            const response = await apiClient.delete(`/favorites/${gameId}`);\n            if (response.success) {\n                currentUser = response.data;\n                return response.data;\n            }\n            throw new Error(response.message);\n        } catch (error) {\n            console.error(\"Remove favorite failed:\", error);\n            throw error;\n        }\n    },\n\n    setFriends: async function(newFriendIds) {\n        // This is complex since we need to handle adding/removing friends\n        // For now, we'll reload the data after the operation\n        try {\n            // The friends management is handled through addFriend/removeFriend\n            // This method is called after those operations, so we just reload\n            const userData = await this.loadData();\n            currentUser = userData;\n        } catch (error) {\n            console.error(\"Set friends failed:\", error);\n            throw error;\n        }\n    },\n\n    addFriend: async function(username) {\n        try {\n            const response = await apiClient.post('/friends', { username });\n            if (response.success) {\n                currentUser = response.data;\n                return response.data;\n            }\n            throw new Error(response.message);\n        } catch (error) {\n            console.error(\"Add friend failed:\", error);\n            throw error;\n        }\n    },\n\n    removeFriend: async function(friendId) {\n        try {\n            const response = await apiClient.delete(`/friends/${friendId}`);\n            if (response.success) {\n                currentUser = response.data;\n                return response.data;\n            }\n        } catch (error) {\n            console.error(\"Remove friend failed:\", error);\n            throw error;\n        }\n    },\n\n    updatePlay: async function(gameId, score, message) {\n        try {\n            const response = await apiClient.put(`/plays/${gameId}`, {\n                score,\n                message\n            });\n            \n            if (response.success) {\n                currentUser = response.data;\n            }\n        } catch (error) {\n            console.error(\"Update play failed:\", error);\n            throw error;\n        }\n    }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}